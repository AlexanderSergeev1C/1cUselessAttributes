
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не ЗначениеЗаполнено(Префиксы) Тогда
		// Префиксы = "адаптер_, бит_, торо_";
		Префиксы = "";
	КонецЕсли;
	
	Если Не СписокМетаданных.Количество() Тогда
		СписокМетаданных.Добавить("Константы",               "Константы",                 Истина);
		СписокМетаданных.Добавить("Справочники",             "Справочники",               Истина);
		СписокМетаданных.Добавить("Документы",               "Документы",                 Истина);
		СписокМетаданных.Добавить("ПланыВидовХарактеристик", "Планы видов характеристик", Истина);
		СписокМетаданных.Добавить("ПланыСчетов",             "Планы счетов",              Истина);
		СписокМетаданных.Добавить("ПланыВидовРасчета",       "Планы видов расчета",       Истина);
		СписокМетаданных.Добавить("РегистрыСведений",        "Регистры сведений",         Истина);
		СписокМетаданных.Добавить("РегистрыНакопления",      "Регистры накопления",       Истина);
		СписокМетаданных.Добавить("РегистрыБухгалтерии",     "Регистры бухгалтерии",      Истина);
		СписокМетаданных.Добавить("РегистрыРасчета",         "Регистры расчета",          Истина);
		СписокМетаданных.Добавить("БизнесПроцессы",          "Бизнес-процессы",           Истина);
		СписокМетаданных.Добавить("Задачи",                  "Задачи",                    Истина);
	КонецЕсли;
	
	ВыводитьНеиспользуемыеРеквизиты = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы



#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРезультата



#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Анализ(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("АнализЗавершение", ЭтотОбъект);
	Если Не ЗначениеЗаполнено(Префиксы) Тогда 
		
		ТекстВопроса = НСтр("ru = 'Не заполнены префиксы для поиска.
			|Хотите запустить анализ по всей конфигурации (может занять продолжительное время)? '");
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура АнализЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	АнализНаСервере();
	
	ОбщееВремяАнализа = СтрШаблон("%1 сек.", (ТекущаяУниверсальнаяДатаВМиллисекундах() - ДатаНачала) / 1000);
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("СписокМетаданных", СписокМетаданных);
	ПараметрыОткрытияФормы.Вставить("ВыводитьНеиспользуемыеОбъекты", ВыводитьНеиспользуемыеОбъекты);
	ПараметрыОткрытияФормы.Вставить("ВыводитьНеиспользуемыеРеквизиты", ВыводитьНеиспользуемыеРеквизиты);
	
	ОткрытьФорму("ВнешняяОбработка.АнализНеиспользуемыхРеквизитов.Форма.ФормаНастроек", ПараметрыОткрытияФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура АнализНаСервере()
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоРезультата");
	ДеревоЗначений.Строки.Очистить();
	
	Если Ложь Тогда
		ДеревоЗначений = Новый ДеревоЗначений;
	КонецЕсли;
	
	МассивМетаданных = ПолучитьМассивМетаданных();
	
	Для Каждого Класс Из МассивМетаданных Цикл
		
		СтрокаКласса = Неопределено;
		ПараметрыКласса = ПолучитьПараметрыКласса(Класс);
		
		Если Класс = Метаданные.Константы Тогда
			
			Для Каждого Мета Из Класс Цикл
				
				Если Не СтрокаСодержитПрефикс(Мета.Имя) Тогда
					Продолжить;
				КонецЕсли;
				
				ЗначениеКонстанты = Константы[Мета.Имя].Получить();
				Если ЗначениеЗаполнено(ЗначениеКонстанты) Тогда
					Продолжить;
				КонецЕсли;
				
				Если СтрокаКласса = Неопределено Тогда
					СтрокаКласса = ДеревоЗначений.Строки.Добавить();
					СтрокаКласса.Имя = ПараметрыКласса.ИмяКласса;
					СтрокаКласса.Тип = 1;
				КонецЕсли;
				
				СтрокаМетаданных = СтрокаКласса.Строки.Добавить();
				СтрокаМетаданных.Имя = Мета.Имя;
				СтрокаМетаданных.Синоним = Мета.Синоним;
				СтрокаМетаданных.Значение = СтрШаблон("<%1>", СтроковоеПредставлениеТипа(ТипЗнч(ЗначениеКонстанты)));
				СтрокаМетаданных.Тип = 2;
				
			КонецЦикла;
			
			Продолжить;
		КонецЕсли;
		
		Для Каждого Мета Из Класс Цикл
		
			// Анализ метаданных
			ПараметрыМета = ПолучитьПараметрыМета(Мета, ПараметрыКласса);
			
			// Анализ данных
			Если ПараметрыМета.КоличествоОбъектов = 0 Тогда
				Если ВыводитьНеиспользуемыеОбъекты И Не ПараметрыМета.ЭтоТиповойОбъектМетаданных Тогда
					Если СтрокаКласса = Неопределено Тогда
						СтрокаКласса = ДеревоЗначений.Строки.Добавить();
						СтрокаКласса.Имя = ПараметрыКласса.ИмяКласса;
						СтрокаКласса.Тип = 1;
					КонецЕсли;
					
					СтрокаМетаданных = СтрокаКласса.Строки.Добавить();
					СтрокаМетаданных.Имя = Мета.Имя;
					СтрокаМетаданных.Синоним = Мета.Синоним;
					СтрокаМетаданных.Примечание = "Нет объектов.";
					СтрокаМетаданных.Тип = 2;
				КонецЕсли;
				
				Продолжить;
			КонецЕсли;
			
			Если Не ВыводитьНеиспользуемыеРеквизиты Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаМетаданных = Неопределено;
			СтрокаТабличныеЧасти = Неопределено;
			
			// Измерения
			ОбработатьИзмерения(ПараметрыМета, ДеревоЗначений, СтрокаКласса, СтрокаМетаданных);
			
			// Ресурсы
			ОбработатьРесурсы(ПараметрыМета, ДеревоЗначений, СтрокаКласса, СтрокаМетаданных);
			
			// Реквизиты
			ОбработатьРеквизиты(ПараметрыМета, ДеревоЗначений, СтрокаКласса, СтрокаМетаданных);
			
			// Признаки учета
			ОбработатьПризнакиУчета(ПараметрыМета, ДеревоЗначений, СтрокаКласса, СтрокаМетаданных);
			
			// Реквизиты
			ОбработатьРеквизитыАдресации(ПараметрыМета, ДеревоЗначений, СтрокаКласса, СтрокаМетаданных);
			
			// Табличные части
			ОбработатьТабличныеЧасти(ПараметрыМета, ДеревоЗначений, СтрокаКласса, СтрокаМетаданных, СтрокаТабличныеЧасти);
			
			// Реквизиты табличных частей
			ОбработатьРеквизитыТабличныхЧастей(ПараметрыМета, ДеревоЗначений, СтрокаКласса, СтрокаМетаданных, СтрокаТабличныеЧасти);
			
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрокаКласс Из ДеревоЗначений.Строки Цикл
		СтрокаКласс.ВремяЗапросаДанных = 0;
		Для Каждого СтрокаМета Из СтрокаКласс.Строки Цикл
			СтрокаМета.ВремяЗапросаДанных = 0;
			Для Каждого Строка Из СтрокаМета.Строки Цикл
				СтрокаМета.ВремяЗапросаДанных = СтрокаМета.ВремяЗапросаДанных + Строка.ВремяЗапросаДанных;
			КонецЦикла;
			СтрокаКласс.ВремяЗапросаДанных = СтрокаКласс.ВремяЗапросаДанных + СтрокаМета.ВремяЗапросаДанных;
		КонецЦикла;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "ДеревоРезультата");
	
КонецПроцедуры

#Область ВспомогательныеПроцедурыИФункции

&НаСервере
Функция СтрокаСодержитПрефикс(ИмяРеквизита)

	Если Не ЗначениеЗаполнено(Префиксы) Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивПрефиксов = СтрРазделить(Префиксы, ",");
	
	Для Каждого Префикс Из МассивПрефиксов Цикл
		Если Не СтрНачинаетсяС(ИмяРеквизита, СокрЛП(Префикс)) Тогда
			Продолжить;
		КонецЕсли;
		
		Возврат Истина;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПолучитьМассивМетаданных()
	
	МассивМетаданных = Новый Массив;
	Для Каждого Элемент Из СписокМетаданных Цикл
		Если Не Элемент.Пометка Тогда
			Продолжить;
		КонецЕсли;
		МассивМетаданных.Добавить(Метаданные[Элемент.Значение]);
	КонецЦикла;
	
	Возврат МассивМетаданных;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыКласса(Класс)
	
	ЕстьИзмерения             = Ложь;
	ЕстьПризнакиУчета         = Ложь;
	ЕстьРеквизиты             = Ложь;
	ЕстьРеквизитыАдресации    = Ложь;
	ЕстьРесурсы               = Ложь;
	ЕстьТабличныеЧасти        = Ложь;
	
	Если Класс = Метаданные.Константы Тогда
		ИмяКласса = "Константы";
		ИмяКоллекции = "Константа";
		
	ИначеЕсли Класс = Метаданные.Справочники Тогда
		ИмяКласса = "Справочники";
		ИмяКоллекции = "Справочник";
		
		ЕстьРеквизиты = Истина;
		ЕстьТабличныеЧасти = Истина;
		
	ИначеЕсли Класс = Метаданные.Документы Тогда
		ИмяКласса = "Документы";
		ИмяКоллекции = "Документ";
		
		ЕстьРеквизиты = Истина;
		ЕстьТабличныеЧасти = Истина;
		
	ИначеЕсли Класс = Метаданные.ПланыВидовХарактеристик Тогда
		ИмяКласса = "Планы видов характеристик";
		ИмяКоллекции = "ПланВидовХарактеристик";
		
		ЕстьРеквизиты = Истина;
		ЕстьТабличныеЧасти = Истина;
		
	ИначеЕсли Класс = Метаданные.ПланыСчетов Тогда
		ИмяКласса = "Планы счетов";
		ИмяКоллекции = "ПланСчетов";
		
		ЕстьПризнакиУчета = Истина;
		ЕстьРеквизиты = Истина;
		ЕстьТабличныеЧасти = Истина;
		
	ИначеЕсли Класс = Метаданные.ПланыВидовРасчета Тогда
		ИмяКласса = "Планы видов расчета";
		ИмяКоллекции = "ПланВидовРасчета";
		
		ЕстьРеквизиты = Истина;
		ЕстьТабличныеЧасти = Истина;
		
	ИначеЕсли Класс = Метаданные.РегистрыСведений Тогда
		ИмяКласса = "Регистры сведений";
		ИмяКоллекции = "РегистрСведений";
		
		ЕстьИзмерения = Истина;
		ЕстьРеквизиты = Истина;
		ЕстьРесурсы = Истина;
		
	ИначеЕсли Класс = Метаданные.РегистрыНакопления Тогда
		ИмяКласса = "Регистры накопления";
		ИмяКоллекции = "РегистрНакопления";
		
		ЕстьИзмерения = Истина;
		ЕстьРеквизиты = Истина;
		ЕстьРесурсы = Истина;
		
	ИначеЕсли Класс = Метаданные.РегистрыБухгалтерии Тогда
		ИмяКласса = "Регистры бухгалтерии";
		ИмяКоллекции = "РегистрБухгалтерии";
		
		ЕстьИзмерения = Истина;
		ЕстьРеквизиты = Истина;
		ЕстьРесурсы = Истина;
		
	ИначеЕсли Класс = Метаданные.РегистрыРасчета Тогда
		ИмяКласса = "Регистры расчета";
		ИмяКоллекции = "РегистрРасчета";
		
		ЕстьИзмерения = Истина;
		ЕстьРеквизиты = Истина;
		ЕстьРесурсы = Истина;
		
	ИначеЕсли Класс = Метаданные.БизнесПроцессы Тогда
		ИмяКласса = "Бизнес-процессы";
		ИмяКоллекции = "БизнесПроцесс";
		
		ЕстьРеквизиты = Истина;
		ЕстьТабличныеЧасти = Истина;
		
	ИначеЕсли Класс = Метаданные.Задачи Тогда
		ИмяКласса = "Задачи";
		ИмяКоллекции = "Задача";
		
		ЕстьРеквизиты = Истина;
		ЕстьРеквизитыАдресации = Истина;
		ЕстьТабличныеЧасти = Истина;
		
	КонецЕсли;
	
	ПараметрыКласса = Новый Структура;
	
	ПараметрыКласса.Вставить("ИмяКласса",    ИмяКласса);
	ПараметрыКласса.Вставить("ИмяКоллекции", ИмяКоллекции);
	
	ПараметрыКласса.Вставить("ЕстьИзмерения",             ЕстьИзмерения);
	ПараметрыКласса.Вставить("ЕстьПризнакиУчета",         ЕстьПризнакиУчета);
	ПараметрыКласса.Вставить("ЕстьРеквизиты",             ЕстьРеквизиты);
	ПараметрыКласса.Вставить("ЕстьРеквизитыАдресации",    ЕстьРеквизитыАдресации);
	ПараметрыКласса.Вставить("ЕстьРесурсы",               ЕстьРесурсы);
	ПараметрыКласса.Вставить("ЕстьТабличныеЧасти",        ЕстьТабличныеЧасти);
	
	Возврат ПараметрыКласса;
КонецФункции

&НаСервере
Функция ПолучитьПараметрыМета(Мета, ПараметрыКласса)
	
	ПараметрыМета = Новый Структура;
	ДополнитьСтруктуру(ПараметрыМета, ПараметрыКласса);
	
	ЭтоТиповойОбъектМетаданных = Не СтрокаСодержитПрефикс(Мета.Имя);
	
	//
	
	КоличествоОбъектов = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрШаблон(ШаблонТекста(), ПараметрыКласса.ИмяКоллекции, Мета.Имя);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() И Выборка.Количество > 0 Тогда
		КоличествоОбъектов = Выборка.Количество;
	КонецЕсли;	
	
	МассивИзмерений              = Новый Массив;
	МассивПризнаковУчета         = Новый Массив;
	МассивРеквизитов             = Новый Массив;
	МассивРеквизитовАдресации    = Новый Массив;
	МассивРесурсов               = Новый Массив;
	МассивПустыхТабличныхЧастей  = Новый Массив;
	
	СтруктураИзмененныхТабличныхЧастей = Новый Структура;
	
	// Измерения
	Если ПараметрыМета.ЕстьИзмерения Тогда
		Для Каждого Измерение Из Мета.Измерения Цикл
			Если Не ЭтоТиповойОбъектМетаданных
				Или СтрокаСодержитПрефикс(Измерение.Имя) Тогда
				МассивИзмерений.Добавить(Измерение.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	СортироватьЗначенияМассива(МассивИзмерений);
	
	// Признаки учета
	Если ПараметрыМета.ЕстьПризнакиУчета Тогда
		Для Каждого ПризнакУчета Из Мета.ПризнакиУчета Цикл
			Если Не ЭтоТиповойОбъектМетаданных
				Или СтрокаСодержитПрефикс(ПризнакУчета.Имя) Тогда
				МассивПризнаковУчета.Добавить(ПризнакУчета.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	СортироватьЗначенияМассива(МассивПризнаковУчета);
	
	// Реквизиты
	Если ПараметрыМета.ЕстьРеквизиты Тогда
		Для Каждого Реквизит Из Мета.Реквизиты Цикл
			Если Не ЭтоТиповойОбъектМетаданных
				Или СтрокаСодержитПрефикс(Реквизит.Имя) Тогда
				МассивРеквизитов.Добавить(Реквизит.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	СортироватьЗначенияМассива(МассивРеквизитов);
	
	// Параметры.Реквизиты адресации
	Если ПараметрыМета.ЕстьРеквизитыАдресации Тогда
		Для Каждого РеквизитАдресации Из Мета.РеквизитыАдресации Цикл
			Если Не ЭтоТиповойОбъектМетаданных
				Или СтрокаСодержитПрефикс(РеквизитАдресации.Имя) Тогда
				МассивРеквизитовАдресации.Добавить(РеквизитАдресации.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	СортироватьЗначенияМассива(МассивРеквизитовАдресации);
	
	// Параметры.Ресурсы
	Если ПараметрыМета.ЕстьРесурсы Тогда
		Для Каждого Ресурс Из Мета.Ресурсы Цикл
			Если Не ЭтоТиповойОбъектМетаданных
				Или СтрокаСодержитПрефикс(Ресурс.Имя) Тогда
				МассивРесурсов.Добавить(Ресурс.Имя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	СортироватьЗначенияМассива(МассивРесурсов);
	
	// Параметры.Табличные части
	Если ПараметрыМета.ЕстьТабличныеЧасти Тогда
		Для Каждого ТабличнаяЧасть Из Мета.ТабличныеЧасти Цикл
			
			МассивРеквизитовТабличныхЧастей = Новый Массив;
			ЭтоТиповаяТабличнаяЧасть = Истина;
			
			Если Не ЭтоТиповойОбъектМетаданных
				Или СтрокаСодержитПрефикс(ТабличнаяЧасть.Имя) Тогда
				МассивПустыхТабличныхЧастей.Добавить(ТабличнаяЧасть.Имя);
				ЭтоТиповаяТабличнаяЧасть = Ложь;
			КонецЕсли;
			
			// Для типовых ТЧ требуется проверять только нетиповые реквизиты.
			// Для нетиповых ТЧ - все реквизиты.
			Если ЭтоТиповаяТабличнаяЧасть Тогда
				Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
					Если СтрокаСодержитПрефикс(Реквизит.Имя) Тогда
						МассивРеквизитовТабличныхЧастей.Добавить(Реквизит.Имя);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
					МассивРеквизитовТабличныхЧастей.Добавить(Реквизит.Имя);
				КонецЦикла;
			КонецЕсли;
			
			Если МассивРеквизитовТабличныхЧастей.Количество() Тогда
				СтруктураИзмененныхТабличныхЧастей.Вставить(ТабличнаяЧасть.Имя, МассивРеквизитовТабличныхЧастей);
				СортироватьЗначенияМассива(МассивРеквизитовТабличныхЧастей);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	СортироватьЗначенияМассива(МассивПустыхТабличныхЧастей);
	
	ПараметрыМета.Вставить("МассивИзмерений",             МассивИзмерений);
	ПараметрыМета.Вставить("МассивПризнаковУчета",        МассивПризнаковУчета);
	ПараметрыМета.Вставить("МассивРеквизитов",            МассивРеквизитов);
	ПараметрыМета.Вставить("МассивРеквизитовАдресации",   МассивРеквизитовАдресации);
	ПараметрыМета.Вставить("МассивРесурсов",              МассивРесурсов);
	ПараметрыМета.Вставить("МассивПустыхТабличныхЧастей", МассивПустыхТабличныхЧастей);
	
	ПараметрыМета.Вставить("СтруктураИзмененныхТабличныхЧастей", СтруктураИзмененныхТабличныхЧастей);
	
	ПараметрыМета.Вставить("КоличествоОбъектов",         КоличествоОбъектов);
	ПараметрыМета.Вставить("ЭтоТиповойОбъектМетаданных", ЭтоТиповойОбъектМетаданных);
	
	ПараметрыМета.Вставить("Мета", Мета);
	
	Возврат ПараметрыМета;
КонецФункции
	
&НаСервереБезКонтекста
Процедура СортироватьЗначенияМассива(Массив)
	
	Список = Новый СписокЗначений;
	Список.ЗагрузитьЗначения(Массив);
	Список.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	Массив = Список.ВыгрузитьЗначения();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтроковоеПредставлениеТипа(Тип)
	
	Представление = "";
	
	Если ЭтоСсылка(Тип) Тогда
	
		ПолноеИмя = Метаданные.НайтиПоТипу(Тип).ПолноеИмя();
		ИмяОбъекта = СтрРазделить(ПолноеИмя, ".")[1];
		
		Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "СправочникСсылка";
		
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ДокументСсылка";
		
		ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "БизнесПроцессСсылка";
		
		ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланВидовХарактеристикСсылка";
		
		ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланСчетовСсылка";
		
		ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланВидовРасчетаСсылка";
		
		ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ЗадачаСсылка";
		
		ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланОбменаСсылка";
		
		ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПеречислениеСсылка";
		
		КонецЕсли;
		
		Результат = ?(Представление = "", Представление, Представление + "." + ИмяОбъекта);
		
	Иначе
		
		Результат = Строка(Тип);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДополнитьСтруктуру(Приемник, Источник)
	
	Для Каждого Элемент Из Источник Цикл
		Приемник.Вставить(Элемент.Ключ, Элемент.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоСсылка(ПроверяемыйТип)
	
	Возврат ПроверяемыйТип <> Тип("Неопределено") И ОписаниеТипаВсеСсылки().СодержитТип(ПроверяемыйТип);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеТипаВсеСсылки()
	
	Возврат Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(
		Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(Новый ОписаниеТипов(
			Справочники.ТипВсеСсылки(),
			Документы.ТипВсеСсылки().Типы()),
			ПланыОбмена.ТипВсеСсылки().Типы()),
			Перечисления.ТипВсеСсылки().Типы()),
			ПланыВидовХарактеристик.ТипВсеСсылки().Типы()),
			ПланыСчетов.ТипВсеСсылки().Типы()),
			ПланыВидовРасчета.ТипВсеСсылки().Типы()),
			БизнесПроцессы.ТипВсеСсылки().Типы()),
			БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().Типы()),
			Задачи.ТипВсеСсылки().Типы());
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросов

&НаСервереБезКонтекста
Функция ШаблонТекста()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(1) КАК Количество
		|ИЗ
		|	%1.%2";
	
	Возврат ТекстЗапроса;
КонецФункции

&НаСервереБезКонтекста
Функция ШаблонТекстаТабличнаяЧасть()
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(1) КАК Количество
		|ИЗ %1.%2.%3";
		
	Возврат ТекстЗапроса;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаТабличныхДанных()
	
	ТекстЗапроса =
		"ВЫБРАТЬ %1
		|ИЗ %2.%3.%4 КАК %5";
	
	Возврат ТекстЗапроса;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаНетабличныхДанных()
	
	ТекстЗапроса =
		"ВЫБРАТЬ %1
		|ИЗ %2.%3 КАК %4";
	
	Возврат ТекстЗапроса;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьШаблонСтрокиНетабличныхДанных(ЭтоДанныеСтроковогоТипа)
	
	Если ЭтоДанныеСтроковогоТипа Тогда
		Строка = "
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПОДСТРОКА(%ИмяМетаданных%.%ИмяРеквизита%, 1, 1024)) КАК КоличествоРазличныхЗначений_%ИмяРеквизита%,
			|	МАКСИМУМ(ПОДСТРОКА(%ИмяМетаданных%.%ИмяРеквизита%, 1, 1024)) КАК МаксимальноеЗначение_%ИмяРеквизита%";
	Иначе
		Строка = "
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ %ИмяМетаданных%.%ИмяРеквизита%) КАК КоличествоРазличныхЗначений_%ИмяРеквизита%,
			|	МАКСИМУМ(%ИмяМетаданных%.%ИмяРеквизита%) КАК МаксимальноеЗначение_%ИмяРеквизита%";
	КонецЕсли;
	
	Возврат Строка;
КонецФункции

#КонецОбласти

#Область АнализДанных

&НаСервере
Процедура ОбработатьИзмерения(ПараметрыМета, ДеревоЗначений, СтрокаКласса, СтрокаМетаданных);

	Если Не ПараметрыМета.ЕстьИзмерения Тогда
		Возврат;
	КонецЕсли;
	
	Мета = ПараметрыМета.Мета;
	
	ЭтоРегистрБухгалтерии = ПараметрыМета.ИмяКоллекции = "РегистрБухгалтерии";
	
	ОписаниеТиповХранилищеЗначения = Новый ОписаниеТипов("ХранилищеЗначения");
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	
	МассивСтрокВыбираемыхДанных = Новый Массив;
	МассивУдаляемых = Новый Массив;
	
	Для Каждого ИмяИзмерения Из ПараметрыМета.МассивИзмерений Цикл
		
		Измерение = Мета.Измерения[ИмяИзмерения];
		Если Измерение.Тип = ОписаниеТиповХранилищеЗначения Тогда
			МассивУдаляемых.Добавить(ИмяИзмерения);
			Продолжить;
		КонецЕсли;
		
		ЭтоДанныеСтроковогоТипа = Измерение.Тип = ОписаниеТиповСтрока;
		ШаблонСтроки = ПолучитьШаблонСтрокиНетабличныхДанных(ЭтоДанныеСтроковогоТипа);
		ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%ИмяМетаданных%", Мета.Имя);
		
		Если ЭтоРегистрБухгалтерии И Измерение.ПризнакУчета <> Неопределено Тогда
			
			// Дт
			СтрокаДт = СтрЗаменить(ШаблонСтроки, "%ИмяРеквизита%", ИмяИзмерения + "Дт");
			МассивСтрокВыбираемыхДанных.Добавить(СтрокаДт);
			
			// Кт
			СтрокаКт = СтрЗаменить(ШаблонСтроки, "%ИмяРеквизита%", ИмяИзмерения + "Кт");
			МассивСтрокВыбираемыхДанных.Добавить(СтрокаКт);
			
		Иначе
			Строка = СтрЗаменить(ШаблонСтроки, "%ИмяРеквизита%", ИмяИзмерения);
			МассивСтрокВыбираемыхДанных.Добавить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не МассивСтрокВыбираемыхДанных.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Удаляемый Из МассивУдаляемых Цикл
		ПараметрыМета.МассивИзмерений.Удалить(ПараметрыМета.МассивИзмерений.Найти(Удаляемый));
	КонецЦикла;
	
	СтрокаВыбираемыхДанных = СтрСоединить(МассивСтрокВыбираемыхДанных, ",");
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрШаблон(ПолучитьТекстЗапросаНетабличныхДанных(), СтрокаВыбираемыхДанных, ПараметрыМета.ИмяКоллекции, Мета.Имя, Мета.Имя);
	
	ДатаНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Выборка = Запрос.Выполнить().Выбрать();
	ВремяВыполненияЗапроса = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ДатаНачала) / 1000;
	
	Выборка.Следующий();
	
	СтрокаТипа = Неопределено;
	
	Для Каждого ИмяИзмерения Из ПараметрыМета.МассивИзмерений Цикл
		
		Измерение = Мета.Измерения[ИмяИзмерения];
		
		Если ЭтоРегистрБухгалтерии И Измерение.ПризнакУчета <> Неопределено Тогда
			
			// Дт
			КоличествоРазличныхЗначений = Выборка["КоличествоРазличныхЗначений_" + ИмяИзмерения + "Дт"];
			МаксимальноеЗначение = Выборка["МаксимальноеЗначение_" + ИмяИзмерения + "Дт"];
			
			Если КоличествоРазличныхЗначений = 1
				И ЗначениеЗаполнено(МаксимальноеЗначение)
				И МаксимальноеЗначение <> Ложь Тогда
				
				Если СтрокаКласса = Неопределено Тогда
					СтрокаКласса = ДеревоЗначений.Строки.Добавить();
					СтрокаКласса.Имя = ПараметрыМета.ИмяКласса;
					СтрокаКласса.Тип = 1;
				КонецЕсли;
				
				Если СтрокаМетаданных = Неопределено Тогда
					СтрокаМетаданных = СтрокаКласса.Строки.Добавить();
					СтрокаМетаданных.Имя = Мета.Имя;
					СтрокаМетаданных.Синоним = Мета.Синоним;
					СтрокаМетаданных.Тип = 2;
					СтрокаМетаданных.Количество = ПараметрыМета.КоличествоОбъектов;
				КонецЕсли;
				
				Если СтрокаТипа = Неопределено Тогда
					СтрокаТипа = СтрокаМетаданных.Строки.Добавить();
					СтрокаТипа.Имя = "Измерения";
					СтрокаТипа.Тип = 3;
					СтрокаТипа.ВремяЗапросаДанных = ВремяВыполненияЗапроса;
				КонецЕсли;
				
				НоваяСтрока = СтрокаТипа.Строки.Добавить();
				НоваяСтрока.Имя = ИмяИзмерения;
				НоваяСтрока.Синоним = Измерение.Синоним;
				НоваяСтрока.Значение = СтрШаблон("<%1>", СтроковоеПредставлениеТипа(ТипЗнч(МаксимальноеЗначение)));
				НоваяСтрока.Тип = 5;
				
				Продолжить;
			КонецЕсли;
			
			// Кт
			КоличествоРазличныхЗначений = Выборка["КоличествоРазличныхЗначений_" + ИмяИзмерения + "Кт"];
			МаксимальноеЗначение = Выборка["МаксимальноеЗначение_" + ИмяИзмерения + "Кт"];
			
			Если КоличествоРазличныхЗначений = 1
				И ЗначениеЗаполнено(МаксимальноеЗначение)
				И МаксимальноеЗначение <> Ложь Тогда
				
				Если СтрокаКласса = Неопределено Тогда
					СтрокаКласса = ДеревоЗначений.Строки.Добавить();
					СтрокаКласса.Имя = ПараметрыМета.ИмяКласса;
					СтрокаКласса.Тип = 1;
				КонецЕсли;
				
				Если СтрокаМетаданных = Неопределено Тогда
					СтрокаМетаданных = СтрокаКласса.Строки.Добавить();
					СтрокаМетаданных.Имя = Мета.Имя;
					СтрокаМетаданных.Синоним = Мета.Синоним;
					СтрокаМетаданных.Тип = 2;
					СтрокаМетаданных.Количество = ПараметрыМета.КоличествоОбъектов;
				КонецЕсли;
				
				Если СтрокаТипа = Неопределено Тогда
					СтрокаТипа = СтрокаМетаданных.Строки.Добавить();
					СтрокаТипа.Имя = "Измерения";
					СтрокаТипа.Тип = 3;
					СтрокаТипа.ВремяЗапросаДанных = ВремяВыполненияЗапроса;
				КонецЕсли;
				
				НоваяСтрока = СтрокаТипа.Строки.Добавить();
				НоваяСтрока.Имя = ИмяИзмерения;
				НоваяСтрока.Синоним = Измерение.Синоним;
				НоваяСтрока.Значение = СтрШаблон("<%1>", СтроковоеПредставлениеТипа(ТипЗнч(МаксимальноеЗначение)));
				НоваяСтрока.Тип = 5;
				
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			КоличествоРазличныхЗначений = Выборка["КоличествоРазличныхЗначений_" + ИмяИзмерения];
			МаксимальноеЗначение = Выборка["МаксимальноеЗначение_" + ИмяИзмерения];
			
			Если КоличествоРазличныхЗначений <> 1
				Или (ЗначениеЗаполнено(МаксимальноеЗначение) И МаксимальноеЗначение <> Ложь) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаКласса = Неопределено Тогда
				СтрокаКласса = ДеревоЗначений.Строки.Добавить();
				СтрокаКласса.Имя = ПараметрыМета.ИмяКласса;
				СтрокаКласса.Тип = 1;
			КонецЕсли;
			
			Если СтрокаМетаданных = Неопределено Тогда
				СтрокаМетаданных = СтрокаКласса.Строки.Добавить();
				СтрокаМетаданных.Имя = Мета.Имя;
				СтрокаМетаданных.Синоним = Мета.Синоним;
				СтрокаМетаданных.Тип = 2;
				СтрокаМетаданных.Количество = ПараметрыМета.КоличествоОбъектов;
			КонецЕсли;
			
			Если СтрокаТипа = Неопределено Тогда
				СтрокаТипа = СтрокаМетаданных.Строки.Добавить();
				СтрокаТипа.Имя = "Измерения";
				СтрокаТипа.Тип = 3;
				СтрокаТипа.ВремяЗапросаДанных = ВремяВыполненияЗапроса;
			КонецЕсли;
			
			НоваяСтрока = СтрокаТипа.Строки.Добавить();
			НоваяСтрока.Имя = ИмяИзмерения;
			НоваяСтрока.Синоним = Измерение.Синоним;
			НоваяСтрока.Значение = СтрШаблон("<%1>", СтроковоеПредставлениеТипа(ТипЗнч(МаксимальноеЗначение)));
			НоваяСтрока.Тип = 5;
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРесурсы(ПараметрыМета, ДеревоЗначений, СтрокаКласса, СтрокаМетаданных);

	Если Не ПараметрыМета.ЕстьРесурсы Тогда
		Возврат;
	КонецЕсли;
	
	Мета = ПараметрыМета.Мета;
	
	ЭтоРегистрБухгалтерии = ПараметрыМета.ИмяКоллекции = "РегистрБухгалтерии";
	
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	
	МассивСтрокВыбираемыхДанных = Новый Массив;
	МассивУдаляемых = Новый Массив;
	
	Для Каждого ИмяРесурса Из ПараметрыМета.МассивРесурсов Цикл
		
		Ресурс = Мета.Ресурсы[ИмяРесурса];
		Если Ресурс.Тип = Новый ОписаниеТипов("ХранилищеЗначения") Тогда
			МассивУдаляемых.Добавить(ИмяРесурса);
			Продолжить;
		КонецЕсли;
		
		ЭтоДанныеСтроковогоТипа = Ресурс.Тип = ОписаниеТиповСтрока;
		ШаблонСтроки = ПолучитьШаблонСтрокиНетабличныхДанных(ЭтоДанныеСтроковогоТипа);
		ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%ИмяМетаданных%", Мета.Имя);
		
		Если ЭтоРегистрБухгалтерии И Ресурс.ПризнакУчета <> Неопределено Тогда
			
			// Дт
			СтрокаДт = СтрЗаменить(ШаблонСтроки, "%ИмяРеквизита%", ИмяРесурса + "Дт");
			МассивСтрокВыбираемыхДанных.Добавить(СтрокаДт);
			
			// Кт
			СтрокаКт = СтрЗаменить(ШаблонСтроки, "%ИмяРеквизита%", ИмяРесурса + "Кт");
			МассивСтрокВыбираемыхДанных.Добавить(СтрокаКт);
			
		Иначе
			Строка = СтрЗаменить(ШаблонСтроки, "%ИмяРеквизита%", ИмяРесурса);
			МассивСтрокВыбираемыхДанных.Добавить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не МассивСтрокВыбираемыхДанных.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Удаляемый Из МассивУдаляемых Цикл
		ПараметрыМета.МассивРесурсов.Удалить(ПараметрыМета.МассивРесурсов.Найти(Удаляемый));
	КонецЦикла;
	
	СтрокаВыбираемыхДанных = СтрСоединить(МассивСтрокВыбираемыхДанных, ",");
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрШаблон(ПолучитьТекстЗапросаНетабличныхДанных(), СтрокаВыбираемыхДанных, ПараметрыМета.ИмяКоллекции, Мета.Имя, Мета.Имя);
	
	ДатаНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Выборка = Запрос.Выполнить().Выбрать();
	ВремяВыполненияЗапроса = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ДатаНачала) / 1000;
	
	Выборка.Следующий();
	
	СтрокаТипа = Неопределено;
	
	Для Каждого ИмяРесурса Из ПараметрыМета.МассивРесурсов Цикл
		
		Ресурс = Мета.Ресурсы[ИмяРесурса];
		
		Если ЭтоРегистрБухгалтерии И Ресурс.ПризнакУчета <> Неопределено Тогда
			
			// Дт
			КоличествоРазличныхЗначений = Выборка["КоличествоРазличныхЗначений_" + ИмяРесурса + "Дт"];
			МаксимальноеЗначение = Выборка["МаксимальноеЗначение_" + ИмяРесурса + "Дт"];
			
			Если КоличествоРазличныхЗначений = 1
				И ЗначениеЗаполнено(МаксимальноеЗначение)
				И МаксимальноеЗначение <> Ложь Тогда
				
				Если СтрокаКласса = Неопределено Тогда
					СтрокаКласса = ДеревоЗначений.Строки.Добавить();
					СтрокаКласса.Имя = ПараметрыМета.ИмяКласса;
					СтрокаКласса.Тип = 1;
				КонецЕсли;
				
				Если СтрокаМетаданных = Неопределено Тогда
					СтрокаМетаданных = СтрокаКласса.Строки.Добавить();
					СтрокаМетаданных.Имя = Мета.Имя;
					СтрокаМетаданных.Синоним = Мета.Синоним;
					СтрокаМетаданных.Тип = 2;
					СтрокаМетаданных.Количество = ПараметрыМета.КоличествоОбъектов;
				КонецЕсли;
				
				Если СтрокаТипа = Неопределено Тогда
					СтрокаТипа = СтрокаМетаданных.Строки.Добавить();
					СтрокаТипа.Имя = "Ресурсы";
					СтрокаТипа.Тип = 3;
					СтрокаТипа.ВремяЗапросаДанных = ВремяВыполненияЗапроса;
				КонецЕсли;
				
				НоваяСтрока = СтрокаТипа.Строки.Добавить();
				НоваяСтрока.Имя = ИмяРесурса;
				НоваяСтрока.Синоним = Ресурс.Синоним;
				НоваяСтрока.Значение = СтрШаблон("<%1>", СтроковоеПредставлениеТипа(ТипЗнч(МаксимальноеЗначение)));
				НоваяСтрока.Тип = 5;
				
				Продолжить;
			КонецЕсли;
			
			// Кт
			КоличествоРазличныхЗначений = Выборка["КоличествоРазличныхЗначений_" + ИмяРесурса + "Кт"];
			МаксимальноеЗначение = Выборка["МаксимальноеЗначение_" + ИмяРесурса + "Кт"];
			
			Если КоличествоРазличныхЗначений = 1
				И ЗначениеЗаполнено(МаксимальноеЗначение)
				И МаксимальноеЗначение <> Ложь Тогда
				
				Если СтрокаКласса = Неопределено Тогда
					СтрокаКласса = ДеревоЗначений.Строки.Добавить();
					СтрокаКласса.Имя = ПараметрыМета.ИмяКласса;
					СтрокаКласса.Тип = 1;
				КонецЕсли;
				
				Если СтрокаМетаданных = Неопределено Тогда
					СтрокаМетаданных = СтрокаКласса.Строки.Добавить();
					СтрокаМетаданных.Имя = Мета.Имя;
					СтрокаМетаданных.Синоним = Мета.Синоним;
					СтрокаМетаданных.Тип = 2;
					СтрокаМетаданных.Количество = ПараметрыМета.КоличествоОбъектов;
				КонецЕсли;
				
				Если СтрокаТипа = Неопределено Тогда
					СтрокаТипа = СтрокаМетаданных.Строки.Добавить();
					СтрокаТипа.Имя = "Ресурсы";
					СтрокаТипа.Тип = 3;
					СтрокаТипа.ВремяЗапросаДанных = ВремяВыполненияЗапроса;
				КонецЕсли;
				
				НоваяСтрока = СтрокаТипа.Строки.Добавить();
				НоваяСтрока.Имя = ИмяРесурса;
				НоваяСтрока.Синоним = Ресурс.Синоним;
				НоваяСтрока.Значение = СтрШаблон("<%1>", СтроковоеПредставлениеТипа(ТипЗнч(МаксимальноеЗначение)));
				НоваяСтрока.Тип = 5;
				
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			КоличествоРазличныхЗначений = Выборка["КоличествоРазличныхЗначений_" + ИмяРесурса];
			МаксимальноеЗначение = Выборка["МаксимальноеЗначение_" + ИмяРесурса];
			
			Если КоличествоРазличныхЗначений <> 1
				Или (ЗначениеЗаполнено(МаксимальноеЗначение) И МаксимальноеЗначение <> Ложь) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаКласса = Неопределено Тогда
				СтрокаКласса = ДеревоЗначений.Строки.Добавить();
				СтрокаКласса.Имя = ПараметрыМета.ИмяКласса;
				СтрокаКласса.Тип = 1;
			КонецЕсли;
			
			Если СтрокаМетаданных = Неопределено Тогда
				СтрокаМетаданных = СтрокаКласса.Строки.Добавить();
				СтрокаМетаданных.Имя = Мета.Имя;
				СтрокаМетаданных.Синоним = Мета.Синоним;
				СтрокаМетаданных.Тип = 2;
				СтрокаМетаданных.Количество = ПараметрыМета.КоличествоОбъектов;
			КонецЕсли;
			
			Если СтрокаТипа = Неопределено Тогда
				СтрокаТипа = СтрокаМетаданных.Строки.Добавить();
				СтрокаТипа.Имя = "Ресурсы";
				СтрокаТипа.Тип = 3;
				СтрокаТипа.ВремяЗапросаДанных = ВремяВыполненияЗапроса;
			КонецЕсли;
			
			НоваяСтрока = СтрокаТипа.Строки.Добавить();
			НоваяСтрока.Имя = ИмяРесурса;
			НоваяСтрока.Синоним = Ресурс.Синоним;
			НоваяСтрока.Значение = СтрШаблон("<%1>", СтроковоеПредставлениеТипа(ТипЗнч(МаксимальноеЗначение)));
			НоваяСтрока.Тип = 5;
		
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРеквизитыАдресации(ПараметрыМета, ДеревоЗначений, СтрокаКласса, СтрокаМетаданных);

	Если Не ПараметрыМета.ЕстьРеквизитыАдресации Тогда
		Возврат;
	КонецЕсли;
	
	Мета = ПараметрыМета.Мета;
	
	МассивСтрокВыбираемыхДанных = Новый Массив;
	МассивУдаляемых = Новый Массив;
	
	Для Каждого ИмяРеквизитаАдресации Из ПараметрыМета.МассивРеквизитовАдресации Цикл
		
		РеквизитАдресации = Мета.РеквизитыАдресации[ИмяРеквизитаАдресации];
		Если РеквизитАдресации.Тип = Новый ОписаниеТипов("ХранилищеЗначения") Тогда
			МассивУдаляемых.Добавить(ИмяРеквизитаАдресации);
			Продолжить;
		КонецЕсли;
		
		ЭтоДанныеСтроковогоТипа = РеквизитАдресации.Тип = Новый ОписаниеТипов("Строка");
		Строка = ПолучитьШаблонСтрокиНетабличныхДанных(ЭтоДанныеСтроковогоТипа);
		Строка = СтрЗаменить(Строка, "%ИмяМетаданных%", Мета.Имя);
		Строка = СтрЗаменить(Строка, "%ИмяРеквизита%", ИмяРеквизитаАдресации);
		
		МассивСтрокВыбираемыхДанных.Добавить(Строка);
		
	КонецЦикла;
	
	Если Не МассивСтрокВыбираемыхДанных.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Удаляемый Из МассивУдаляемых Цикл
		ПараметрыМета.МассивРеквизитовАдресации.Удалить(ПараметрыМета.МассивРеквизитовАдресации.Найти(Удаляемый));
	КонецЦикла;
	
	СтрокаВыбираемыхДанных = СтрСоединить(МассивСтрокВыбираемыхДанных, ",");
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрШаблон(ПолучитьТекстЗапросаНетабличныхДанных(), СтрокаВыбираемыхДанных, ПараметрыМета.ИмяКоллекции, Мета.Имя, Мета.Имя);
	
	ДатаНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Выборка = Запрос.Выполнить().Выбрать();
	ВремяВыполненияЗапроса = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ДатаНачала) / 1000;
	
	Выборка.Следующий();
	
	СтрокаТипа = Неопределено;
	
	Для Каждого ИмяРеквизитаАдресации Из ПараметрыМета.МассивРеквизитовАдресации Цикл
		
		РеквизитАдресации = Мета.РеквизитыАдресации[ИмяРеквизитаАдресации];
		
		КоличествоРазличныхЗначений = Выборка["КоличествоРазличныхЗначений_" + ИмяРеквизитаАдресации];
		МаксимальноеЗначение = Выборка["МаксимальноеЗначение_" + ИмяРеквизитаАдресации];
		
		Если КоличествоРазличныхЗначений <> 1
			Или (ЗначениеЗаполнено(МаксимальноеЗначение) И МаксимальноеЗначение <> Ложь) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаКласса = Неопределено Тогда
			СтрокаКласса = ДеревоЗначений.Строки.Добавить();
			СтрокаКласса.Имя = ПараметрыМета.ИмяКласса;
			СтрокаКласса.Тип = 1;
		КонецЕсли;
		
		Если СтрокаМетаданных = Неопределено Тогда
			СтрокаМетаданных = СтрокаКласса.Строки.Добавить();
			СтрокаМетаданных.Имя = Мета.Имя;
			СтрокаМетаданных.Синоним = Мета.Синоним;
			СтрокаМетаданных.Тип = 2;
			СтрокаМетаданных.Количество = ПараметрыМета.КоличествоОбъектов;
		КонецЕсли;
		
		Если СтрокаТипа = Неопределено Тогда
			СтрокаТипа = СтрокаМетаданных.Строки.Добавить();
			СтрокаТипа.Имя = "Реквизиты адресации";
			СтрокаТипа.Тип = 3;
			СтрокаТипа.ВремяЗапросаДанных = ВремяВыполненияЗапроса;
		КонецЕсли;
		
		НоваяСтрока = СтрокаТипа.Строки.Добавить();
		НоваяСтрока.Имя = ИмяРеквизитаАдресации;
		НоваяСтрока.Синоним = РеквизитАдресации.Синоним;
		НоваяСтрока.Значение = СтрШаблон("<%1>", СтроковоеПредставлениеТипа(ТипЗнч(МаксимальноеЗначение)));
		НоваяСтрока.Тип = 5;
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРеквизиты(ПараметрыМета, ДеревоЗначений, СтрокаКласса, СтрокаМетаданных);

	Если Не ПараметрыМета.ЕстьРеквизиты Тогда
		Возврат;
	КонецЕсли;
	
	Мета = ПараметрыМета.Мета;
	
	МассивСтрокВыбираемыхДанных = Новый Массив;
	МассивУдаляемых = Новый Массив;
	
	Для Каждого ИмяРеквизита Из ПараметрыМета.МассивРеквизитов Цикл
		
		Реквизит = Мета.Реквизиты[ИмяРеквизита];
		Если Реквизит.Тип = Новый ОписаниеТипов("ХранилищеЗначения") Тогда
			МассивУдаляемых.Добавить(ИмяРеквизита);
			Продолжить;
		КонецЕсли;
		
		ЭтоДанныеСтроковогоТипа = Реквизит.Тип = Новый ОписаниеТипов("Строка");
		Строка = ПолучитьШаблонСтрокиНетабличныхДанных(ЭтоДанныеСтроковогоТипа);
		Строка = СтрЗаменить(Строка, "%ИмяМетаданных%", Мета.Имя);
		Строка = СтрЗаменить(Строка, "%ИмяРеквизита%", ИмяРеквизита);
		
		МассивСтрокВыбираемыхДанных.Добавить(Строка);
		
	КонецЦикла;
	
	Если Не МассивСтрокВыбираемыхДанных.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Удаляемый Из МассивУдаляемых Цикл
		ПараметрыМета.МассивРеквизитов.Удалить(ПараметрыМета.МассивРеквизитов.Найти(Удаляемый));
	КонецЦикла;
	
	СтрокаВыбираемыхДанных = СтрСоединить(МассивСтрокВыбираемыхДанных, ",");
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрШаблон(ПолучитьТекстЗапросаНетабличныхДанных(), СтрокаВыбираемыхДанных, ПараметрыМета.ИмяКоллекции, Мета.Имя, Мета.Имя);
	
	ДатаНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Выборка = Запрос.Выполнить().Выбрать();
	ВремяВыполненияЗапроса = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ДатаНачала) / 1000;
	
	Выборка.Следующий();
	
	СтрокаТипа = Неопределено;
	
	Для Каждого ИмяРеквизита Из ПараметрыМета.МассивРеквизитов Цикл
		
		Реквизит = Мета.Реквизиты[ИмяРеквизита];
		
		КоличествоРазличныхЗначений = Выборка["КоличествоРазличныхЗначений_" + ИмяРеквизита];
		МаксимальноеЗначение = Выборка["МаксимальноеЗначение_" + ИмяРеквизита];
		
		Если КоличествоРазличныхЗначений <> 1
			Или (ЗначениеЗаполнено(МаксимальноеЗначение) И МаксимальноеЗначение <> Ложь) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаКласса = Неопределено Тогда
			СтрокаКласса = ДеревоЗначений.Строки.Добавить();
			СтрокаКласса.Имя = ПараметрыМета.ИмяКласса;
			СтрокаКласса.Тип = 1;
		КонецЕсли;
		
		Если СтрокаМетаданных = Неопределено Тогда
			СтрокаМетаданных = СтрокаКласса.Строки.Добавить();
			СтрокаМетаданных.Имя = Мета.Имя;
			СтрокаМетаданных.Синоним = Мета.Синоним;
			СтрокаМетаданных.Тип = 2;
			СтрокаМетаданных.Количество = ПараметрыМета.КоличествоОбъектов;
		КонецЕсли;
		
		Если СтрокаТипа = Неопределено Тогда
			СтрокаТипа = СтрокаМетаданных.Строки.Добавить();
			СтрокаТипа.Имя = "Реквизиты";
			СтрокаТипа.Тип = 3;
			СтрокаТипа.ВремяЗапросаДанных = ВремяВыполненияЗапроса;
		КонецЕсли;
		
		НоваяСтрока = СтрокаТипа.Строки.Добавить();
		НоваяСтрока.Имя = ИмяРеквизита;
		НоваяСтрока.Синоним = Реквизит.Синоним;
		НоваяСтрока.Значение = СтрШаблон("<%1>", СтроковоеПредставлениеТипа(ТипЗнч(МаксимальноеЗначение)));
		НоваяСтрока.Тип = 5;
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПризнакиУчета(ПараметрыМета, ДеревоЗначений, СтрокаКласса, СтрокаМетаданных);

	Если Не ПараметрыМета.ЕстьПризнакиУчета Тогда
		Возврат;
	КонецЕсли;
	
	Мета = ПараметрыМета.Мета;
	
	МассивСтрокВыбираемыхДанных = Новый Массив;
	МассивУдаляемых = Новый Массив;
	
	Для Каждого ИмяПризнакаУчета Из ПараметрыМета.МассивПризнаковУчета Цикл
		
		ПризнакУчета = Мета.ПризнакиУчета[ИмяПризнакаУчета];
		Если ПризнакУчета.Тип = Новый ОписаниеТипов("ХранилищеЗначения") Тогда
			МассивУдаляемых.Добавить(ИмяПризнакаУчета);
			Продолжить;
		КонецЕсли;
		
		ЭтоДанныеСтроковогоТипа = ПризнакУчета.Тип = Новый ОписаниеТипов("Строка");
		Строка = ПолучитьШаблонСтрокиНетабличныхДанных(ЭтоДанныеСтроковогоТипа);
		Строка = СтрЗаменить(Строка, "%ИмяМетаданных%", Мета.Имя);
		Строка = СтрЗаменить(Строка, "%ИмяРеквизита%", ИмяПризнакаУчета);
		
		МассивСтрокВыбираемыхДанных.Добавить(Строка);
		
	КонецЦикла;
	
	Если Не МассивСтрокВыбираемыхДанных.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Удаляемый Из МассивУдаляемых Цикл
		ПараметрыМета.МассивПризнаковУчета.Удалить(ПараметрыМета.МассивПризнаковУчета.Найти(Удаляемый));
	КонецЦикла;
	
	СтрокаВыбираемыхДанных = СтрСоединить(МассивСтрокВыбираемыхДанных, ",");
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрШаблон(ПолучитьТекстЗапросаНетабличныхДанных(), СтрокаВыбираемыхДанных, ПараметрыМета.ИмяКоллекции, Мета.Имя, Мета.Имя);
	
	ДатаНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Выборка = Запрос.Выполнить().Выбрать();
	ВремяВыполненияЗапроса = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ДатаНачала) / 1000;
	
	Выборка.Следующий();
	
	СтрокаТипа = Неопределено;
	
	Для Каждого ИмяПризнакаУчета Из ПараметрыМета.МассивПризнаковУчета Цикл
		
		ПризнакУчета = Мета.ПризнакиУчета[ИмяПризнакаУчета];
		
		КоличествоРазличныхЗначений = Выборка["КоличествоРазличныхЗначений_" + ИмяПризнакаУчета];
		МаксимальноеЗначение = Выборка["МаксимальноеЗначение_" + ИмяПризнакаУчета];
		
		Если КоличествоРазличныхЗначений <> 1
			Или (ЗначениеЗаполнено(МаксимальноеЗначение) И МаксимальноеЗначение <> Ложь) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаКласса = Неопределено Тогда
			СтрокаКласса = ДеревоЗначений.Строки.Добавить();
			СтрокаКласса.Имя = ПараметрыМета.ИмяКласса;
			СтрокаКласса.Тип = 1;
		КонецЕсли;
		
		Если СтрокаМетаданных = Неопределено Тогда
			СтрокаМетаданных = СтрокаКласса.Строки.Добавить();
			СтрокаМетаданных.Имя = Мета.Имя;
			СтрокаМетаданных.Синоним = Мета.Синоним;
			СтрокаМетаданных.Тип = 2;
			СтрокаМетаданных.Количество = ПараметрыМета.КоличествоОбъектов;
		КонецЕсли;
		
		Если СтрокаТипа = Неопределено Тогда
			СтрокаТипа = СтрокаМетаданных.Строки.Добавить();
			СтрокаТипа.Имя = "Признаки учета";
			СтрокаТипа.Тип = 3;
			СтрокаТипа.ВремяЗапросаДанных = ВремяВыполненияЗапроса;
		КонецЕсли;
		
		НоваяСтрока = СтрокаТипа.Строки.Добавить();
		НоваяСтрока.Имя = ИмяПризнакаУчета;
		НоваяСтрока.Синоним = ПризнакУчета.Синоним;
		НоваяСтрока.Значение = СтрШаблон("<%1>", СтроковоеПредставлениеТипа(ТипЗнч(МаксимальноеЗначение)));
		НоваяСтрока.Тип = 5;
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьТабличныеЧасти(ПараметрыМета, ДеревоЗначений, СтрокаКласса, СтрокаМетаданных, СтрокаТабличныеЧасти);

	Если Не ПараметрыМета.ЕстьТабличныеЧасти Тогда
		Возврат;
	КонецЕсли;
	
	Мета = ПараметрыМета.Мета;
	
	Запрос = Новый Запрос;
	
	Для Каждого ИмяТабличнойЧасти Из ПараметрыМета.МассивПустыхТабличныхЧастей Цикл
		
		Запрос.Текст = СтрШаблон(ШаблонТекстаТабличнаяЧасть(), ПараметрыМета.ИмяКоллекции, Мета.Имя, ИмяТабличнойЧасти);
		
		ДатаНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Результат = Запрос.Выполнить();
		ВремяВыполненияЗапроса = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ДатаНачала) / 1000;
		
		Если Не Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;
			
		Если СтрокаКласса = Неопределено Тогда
			СтрокаКласса = ДеревоЗначений.Строки.Добавить();
			СтрокаКласса.Имя = ПараметрыМета.ИмяКласса;
			СтрокаКласса.Тип = 1;
		КонецЕсли;
		
		Если СтрокаМетаданных = Неопределено Тогда
			СтрокаМетаданных = СтрокаКласса.Строки.Добавить();
			СтрокаМетаданных.Имя = Мета.Имя;
			СтрокаМетаданных.Синоним = Мета.Синоним;
			СтрокаМетаданных.Тип = 2;
			СтрокаМетаданных.Количество = ПараметрыМета.КоличествоОбъектов;
		КонецЕсли;
		
		Если СтрокаТабличныеЧасти = Неопределено Тогда
			СтрокаТабличныеЧасти = СтрокаМетаданных.Строки.Добавить();
			СтрокаТабличныеЧасти.Имя = "Табличные части";
			СтрокаТабличныеЧасти.Тип = 3;
			СтрокаТабличныеЧасти.ВремяЗапросаДанных = ВремяВыполненияЗапроса;
		КонецЕсли;
		
		НоваяСтрока = СтрокаТабличныеЧасти.Строки.Добавить();
		НоваяСтрока.Имя = ИмяТабличнойЧасти;
		НоваяСтрока.Синоним = Мета.ТабличныеЧасти[ИмяТабличнойЧасти].Синоним;
		НоваяСтрока.Примечание = "Пустая табличная часть";
		НоваяСтрока.Тип = 4;
			
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРеквизитыТабличныхЧастей(ПараметрыМета, ДеревоЗначений, СтрокаКласса, СтрокаМетаданных, СтрокаТабличныеЧасти);

	Если Не ПараметрыМета.ЕстьТабличныеЧасти Тогда
		Возврат;
	КонецЕсли;
	
	Мета = ПараметрыМета.Мета;
	
	Запрос = Новый Запрос;
	
	Для Каждого КлючИЗначение Из ПараметрыМета.СтруктураИзмененныхТабличныхЧастей Цикл
		
		ИмяТабличнойЧасти = КлючИЗначение.Ключ;
		МассивРеквизитов = КлючИЗначение.Значение;
		
		МассивСтрокВыбираемыхДанных = Новый Массив;
		МассивУдаляемых = Новый Массив;
		
		СтрокаИмяТабличнойЧасти = Неопределено;
		
		Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
			
			Реквизит = Мета.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты[ИмяРеквизита];
			Если Реквизит.Тип = Новый ОписаниеТипов("ХранилищеЗначения") Тогда
				МассивУдаляемых.Добавить(ИмяРеквизита);
				Продолжить;
			КонецЕсли;
			
			ЭтоДанныеСтроковогоТипа = Реквизит.Тип = Новый ОписаниеТипов("Строка");
			Строка = ПолучитьШаблонСтрокиНетабличныхДанных(ЭтоДанныеСтроковогоТипа);
			Строка = СтрЗаменить(Строка, "%ИмяМетаданных%", Мета.Имя + ИмяТабличнойЧасти);
			Строка = СтрЗаменить(Строка, "%ИмяРеквизита%", ИмяРеквизита);
			
			МассивСтрокВыбираемыхДанных.Добавить(Строка);
			
		КонецЦикла;
			
		Если Не МассивСтрокВыбираемыхДанных.Количество() Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого Удаляемый Из МассивУдаляемых Цикл
			МассивРеквизитов.Удалить(МассивРеквизитов.Найти(Удаляемый));
		КонецЦикла;
		
		МассивСтрокВыбираемыхДанных.Добавить("КОЛИЧЕСТВО(1) КАК Количество");
		
		СтрокаВыбираемыхДанных = СтрСоединить(МассивСтрокВыбираемыхДанных, ",");
		
		Запрос = Новый Запрос;
		Запрос.Текст = СтрШаблон(ПолучитьТекстЗапросаТабличныхДанных(), СтрокаВыбираемыхДанных, ПараметрыМета.ИмяКоллекции, Мета.Имя, ИмяТабличнойЧасти, Мета.Имя + ИмяТабличнойЧасти);
		
		ДатаНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Выборка = Запрос.Выполнить().Выбрать();
		ВремяВыполненияЗапроса = (ТекущаяУниверсальнаяДатаВМиллисекундах() - ДатаНачала) / 1000;
		
		Выборка.Следующий();
		
		Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
			
			Реквизит = Мета.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты[ИмяРеквизита];
			
			КоличествоРазличныхЗначений = Выборка["КоличествоРазличныхЗначений_" + ИмяРеквизита];
			МаксимальноеЗначение = Выборка["МаксимальноеЗначение_" + ИмяРеквизита];
			
			Если КоличествоРазличныхЗначений <> 1
				Или (ЗначениеЗаполнено(МаксимальноеЗначение) И МаксимальноеЗначение <> Ложь) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаКласса = Неопределено Тогда
				СтрокаКласса = ДеревоЗначений.Строки.Добавить();
				СтрокаКласса.Имя = ПараметрыМета.ИмяКласса;
				СтрокаКласса.Тип = 1;
			КонецЕсли;
			
			Если СтрокаМетаданных = Неопределено Тогда
				СтрокаМетаданных = СтрокаКласса.Строки.Добавить();
				СтрокаМетаданных.Имя = Мета.Имя;
				СтрокаМетаданных.Синоним = Мета.Синоним;
				СтрокаМетаданных.Тип = 2;
				СтрокаМетаданных.Количество = ПараметрыМета.КоличествоОбъектов;
			КонецЕсли;
			
			Если СтрокаТабличныеЧасти = Неопределено Тогда
				СтрокаТабличныеЧасти = СтрокаМетаданных.Строки.Добавить();
				СтрокаТабличныеЧасти.Имя = "Табличные части";
				СтрокаТабличныеЧасти.Тип = 3;
				СтрокаТабличныеЧасти.ВремяЗапросаДанных = ВремяВыполненияЗапроса;
			КонецЕсли;
			
			Если СтрокаИмяТабличнойЧасти = Неопределено Тогда
				СтрокаИмяТабличнойЧасти = СтрокаТабличныеЧасти.Строки.Добавить();
				СтрокаИмяТабличнойЧасти.Имя = ИмяТабличнойЧасти;
				СтрокаИмяТабличнойЧасти.Синоним = Мета.ТабличныеЧасти[ИмяТабличнойЧасти].Синоним;
				СтрокаИмяТабличнойЧасти.Количество = Выборка.Количество;
				СтрокаИмяТабличнойЧасти.Тип = 4;
			КонецЕсли;
			
			НоваяСтрока = СтрокаИмяТабличнойЧасти.Строки.Добавить();
			НоваяСтрока.Имя = ИмяРеквизита;
			НоваяСтрока.Синоним = Реквизит.Синоним;
			НоваяСтрока.Значение = СтрШаблон("<%1>", ТипЗнч(МаксимальноеЗначение));
			НоваяСтрока.Тип = 5;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
